<?xml version="1.0" encoding="UTF-8" ?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License.
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->

<beans	xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
		xmlns:cloud="http://schema.cloudfoundry.org/spring"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:sec="http://www.springframework.org/schema/security"
		xmlns:jdbc="http://www.springframework.org/schema/jdbc"
		xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2
			http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
			http://www.springframework.org/schema/security
			http://www.springframework.org/schema/security/spring-security-3.1.xsd
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.1.xsd
			http://schema.cloudfoundry.org/spring
			http://schema.cloudfoundry.org/spring/cloudfoundry-spring.xsd
			http://www.springframework.org/schema/jdbc
			http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd">

	<mvc:annotation-driven />

	<sec:http pattern="/api/**">
		<sec:http-basic />
		<sec:intercept-url pattern="/api/**" access="ROLE_SERVICE" />
	</sec:http>

	<sec:http entry-point-ref="loginEntryPoint"
		disable-url-rewriting="true">
		<sec:intercept-url pattern="/**" access="ROLE_USER" />
		<sec:anonymous enabled="false" />
		<sec:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
		<sec:custom-filter ref="openidClientFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</sec:http>

	<bean id="loginEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg value="/login" />
	</bean>

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:password-encoder hash="sha" />
			<sec:user-service>
				<sec:user name="cf-pgm@rbcon.com" password="d505cafc56b7b66109b5d57d3c930ecb60c666dc"
					authorities="ROLE_SERVICE" />
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>

	<!--apply the oauth client context -->
	<oauth:client id="oauth2ClientFilter" />

	<bean id="openidClientFilter" class="org.cloudfoundry.identity.uaa.openid.OpenIdClientFilter">
		<constructor-arg value="/login" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="restTemplate">
			<oauth:rest-template resource="web" />
		</property>
		<property name="userInfoUrl" value="${userInfoUri}" />
	</bean>

	<bean id="homeController" class="org.cloudfoundry.identity.support.web.HomeController">
		<property name="token" value="${token}" />
		<property name="returnTo" value="${returnTo}" />
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>

	<bean id="apiController" class="org.cloudfoundry.support.services.api.ApiController">
		<property name="uaaRestTemplate">
			<oauth:rest-template resource="rest" />
		</property>
		<property name="restTemplate" ref="restTemplate" />
		<property name="portalUrl" value="${portalUrl}" />
		<property name="zendeskCredential" value="${zendeskCredential}" />
		<property name="zendeskApiUpdateTicketUrl" value="${zendeskApiUpdateTicketUrl}" />
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate" />

	<!--define an oauth 2 resource for api access -->
	<oauth:resource id="web" type="authorization_code"
		client-id="${clientId}" client-secret="${clientSecret}"
		access-token-uri="${accessTokenUri}" user-authorization-uri="${userAuthorizationUri}"
		scope="openid" />

	<!-- oauth2 resource for service client -->
	<oauth:resource id="rest" type="client_credentials"
		client-id="${clientId}" client-secret="${clientSecret}"
		access-token-uri="${accessTokenUri}" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="ds" />
	</bean>

	<beans profile="default">
		<context:property-placeholder location="classpath:application.properties" />

		<!-- DataSource -->
		<jdbc:embedded-database id="ds" type="H2">
			<jdbc:script location="classpath:schema.sql" execution="INIT" />
		</jdbc:embedded-database>
	</beans>

	<beans profile="cloud">
		<context:property-placeholder location="classpath:application-cloud.properties" />

		<!-- DataSource -->
		<cloud:data-source id="ds" />
	</beans>

</beans>